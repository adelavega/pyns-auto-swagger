# coding: utf-8

"""
    neuroscout

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.inline_response_default2_dataset_address import InlineResponseDefault2DatasetAddress  # noqa: F401,E501
from swagger_client.models.inline_response_default2_dataset_name import InlineResponseDefault2DatasetName  # noqa: F401,E501
from swagger_client.models.inline_response_default2_func_paths import InlineResponseDefault2FuncPaths  # noqa: F401,E501
from swagger_client.models.inline_response_default2_mask_paths import InlineResponseDefault2MaskPaths  # noqa: F401,E501
from swagger_client.models.inline_response_default2_preproc_address import InlineResponseDefault2PreprocAddress  # noqa: F401,E501


class InlineResponseDefault2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset_address': 'InlineResponseDefault2DatasetAddress',
        'dataset_name': 'InlineResponseDefault2DatasetName',
        'func_paths': 'list[InlineResponseDefault2FuncPaths]',
        'mask_paths': 'list[InlineResponseDefault2MaskPaths]',
        'preproc_address': 'InlineResponseDefault2PreprocAddress'
    }

    attribute_map = {
        'dataset_address': 'dataset_address',
        'dataset_name': 'dataset_name',
        'func_paths': 'func_paths',
        'mask_paths': 'mask_paths',
        'preproc_address': 'preproc_address'
    }

    def __init__(self, dataset_address=None, dataset_name=None, func_paths=None, mask_paths=None, preproc_address=None):  # noqa: E501
        """InlineResponseDefault2 - a model defined in Swagger"""  # noqa: E501

        self._dataset_address = None
        self._dataset_name = None
        self._func_paths = None
        self._mask_paths = None
        self._preproc_address = None
        self.discriminator = None

        if dataset_address is not None:
            self.dataset_address = dataset_address
        if dataset_name is not None:
            self.dataset_name = dataset_name
        if func_paths is not None:
            self.func_paths = func_paths
        if mask_paths is not None:
            self.mask_paths = mask_paths
        if preproc_address is not None:
            self.preproc_address = preproc_address

    @property
    def dataset_address(self):
        """Gets the dataset_address of this InlineResponseDefault2.  # noqa: E501


        :return: The dataset_address of this InlineResponseDefault2.  # noqa: E501
        :rtype: InlineResponseDefault2DatasetAddress
        """
        return self._dataset_address

    @dataset_address.setter
    def dataset_address(self, dataset_address):
        """Sets the dataset_address of this InlineResponseDefault2.


        :param dataset_address: The dataset_address of this InlineResponseDefault2.  # noqa: E501
        :type: InlineResponseDefault2DatasetAddress
        """

        self._dataset_address = dataset_address

    @property
    def dataset_name(self):
        """Gets the dataset_name of this InlineResponseDefault2.  # noqa: E501


        :return: The dataset_name of this InlineResponseDefault2.  # noqa: E501
        :rtype: InlineResponseDefault2DatasetName
        """
        return self._dataset_name

    @dataset_name.setter
    def dataset_name(self, dataset_name):
        """Sets the dataset_name of this InlineResponseDefault2.


        :param dataset_name: The dataset_name of this InlineResponseDefault2.  # noqa: E501
        :type: InlineResponseDefault2DatasetName
        """

        self._dataset_name = dataset_name

    @property
    def func_paths(self):
        """Gets the func_paths of this InlineResponseDefault2.  # noqa: E501


        :return: The func_paths of this InlineResponseDefault2.  # noqa: E501
        :rtype: list[InlineResponseDefault2FuncPaths]
        """
        return self._func_paths

    @func_paths.setter
    def func_paths(self, func_paths):
        """Sets the func_paths of this InlineResponseDefault2.


        :param func_paths: The func_paths of this InlineResponseDefault2.  # noqa: E501
        :type: list[InlineResponseDefault2FuncPaths]
        """

        self._func_paths = func_paths

    @property
    def mask_paths(self):
        """Gets the mask_paths of this InlineResponseDefault2.  # noqa: E501


        :return: The mask_paths of this InlineResponseDefault2.  # noqa: E501
        :rtype: list[InlineResponseDefault2MaskPaths]
        """
        return self._mask_paths

    @mask_paths.setter
    def mask_paths(self, mask_paths):
        """Sets the mask_paths of this InlineResponseDefault2.


        :param mask_paths: The mask_paths of this InlineResponseDefault2.  # noqa: E501
        :type: list[InlineResponseDefault2MaskPaths]
        """

        self._mask_paths = mask_paths

    @property
    def preproc_address(self):
        """Gets the preproc_address of this InlineResponseDefault2.  # noqa: E501


        :return: The preproc_address of this InlineResponseDefault2.  # noqa: E501
        :rtype: InlineResponseDefault2PreprocAddress
        """
        return self._preproc_address

    @preproc_address.setter
    def preproc_address(self, preproc_address):
        """Sets the preproc_address of this InlineResponseDefault2.


        :param preproc_address: The preproc_address of this InlineResponseDefault2.  # noqa: E501
        :type: InlineResponseDefault2PreprocAddress
        """

        self._preproc_address = preproc_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponseDefault2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
