# coding: utf-8

"""
    neuroscout

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponseDefault7(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'duration': 'float',
        'id': 'str',
        'onset': 'float',
        'predictor_id': 'int',
        'run_id': 'int',
        'value': 'str'
    }

    attribute_map = {
        'duration': 'duration',
        'id': 'id',
        'onset': 'onset',
        'predictor_id': 'predictor_id',
        'run_id': 'run_id',
        'value': 'value'
    }

    def __init__(self, duration=None, id=None, onset=None, predictor_id=None, run_id=None, value=None):  # noqa: E501
        """InlineResponseDefault7 - a model defined in Swagger"""  # noqa: E501

        self._duration = None
        self._id = None
        self._onset = None
        self._predictor_id = None
        self._run_id = None
        self._value = None
        self.discriminator = None

        if duration is not None:
            self.duration = duration
        if id is not None:
            self.id = id
        if onset is not None:
            self.onset = onset
        if predictor_id is not None:
            self.predictor_id = predictor_id
        if run_id is not None:
            self.run_id = run_id
        if value is not None:
            self.value = value

    @property
    def duration(self):
        """Gets the duration of this InlineResponseDefault7.  # noqa: E501

        Duration in seconds.  # noqa: E501

        :return: The duration of this InlineResponseDefault7.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this InlineResponseDefault7.

        Duration in seconds.  # noqa: E501

        :param duration: The duration of this InlineResponseDefault7.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def id(self):
        """Gets the id of this InlineResponseDefault7.  # noqa: E501


        :return: The id of this InlineResponseDefault7.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponseDefault7.


        :param id: The id of this InlineResponseDefault7.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def onset(self):
        """Gets the onset of this InlineResponseDefault7.  # noqa: E501

        Onset in seconds.  # noqa: E501

        :return: The onset of this InlineResponseDefault7.  # noqa: E501
        :rtype: float
        """
        return self._onset

    @onset.setter
    def onset(self, onset):
        """Sets the onset of this InlineResponseDefault7.

        Onset in seconds.  # noqa: E501

        :param onset: The onset of this InlineResponseDefault7.  # noqa: E501
        :type: float
        """

        self._onset = onset

    @property
    def predictor_id(self):
        """Gets the predictor_id of this InlineResponseDefault7.  # noqa: E501


        :return: The predictor_id of this InlineResponseDefault7.  # noqa: E501
        :rtype: int
        """
        return self._predictor_id

    @predictor_id.setter
    def predictor_id(self, predictor_id):
        """Sets the predictor_id of this InlineResponseDefault7.


        :param predictor_id: The predictor_id of this InlineResponseDefault7.  # noqa: E501
        :type: int
        """

        self._predictor_id = predictor_id

    @property
    def run_id(self):
        """Gets the run_id of this InlineResponseDefault7.  # noqa: E501


        :return: The run_id of this InlineResponseDefault7.  # noqa: E501
        :rtype: int
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this InlineResponseDefault7.


        :param run_id: The run_id of this InlineResponseDefault7.  # noqa: E501
        :type: int
        """

        self._run_id = run_id

    @property
    def value(self):
        """Gets the value of this InlineResponseDefault7.  # noqa: E501

        Value, or amplitude.  # noqa: E501

        :return: The value of this InlineResponseDefault7.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this InlineResponseDefault7.

        Value, or amplitude.  # noqa: E501

        :param value: The value of this InlineResponseDefault7.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponseDefault7):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
