# coding: utf-8

"""
    neuroscout

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponseDefault9RunStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mean': 'float',
        'run_id': 'int',
        'stdev': 'float'
    }

    attribute_map = {
        'mean': 'mean',
        'run_id': 'run_id',
        'stdev': 'stdev'
    }

    def __init__(self, mean=None, run_id=None, stdev=None):  # noqa: E501
        """InlineResponseDefault9RunStatistics - a model defined in Swagger"""  # noqa: E501

        self._mean = None
        self._run_id = None
        self._stdev = None
        self.discriminator = None

        if mean is not None:
            self.mean = mean
        if run_id is not None:
            self.run_id = run_id
        if stdev is not None:
            self.stdev = stdev

    @property
    def mean(self):
        """Gets the mean of this InlineResponseDefault9RunStatistics.  # noqa: E501


        :return: The mean of this InlineResponseDefault9RunStatistics.  # noqa: E501
        :rtype: float
        """
        return self._mean

    @mean.setter
    def mean(self, mean):
        """Sets the mean of this InlineResponseDefault9RunStatistics.


        :param mean: The mean of this InlineResponseDefault9RunStatistics.  # noqa: E501
        :type: float
        """

        self._mean = mean

    @property
    def run_id(self):
        """Gets the run_id of this InlineResponseDefault9RunStatistics.  # noqa: E501


        :return: The run_id of this InlineResponseDefault9RunStatistics.  # noqa: E501
        :rtype: int
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this InlineResponseDefault9RunStatistics.


        :param run_id: The run_id of this InlineResponseDefault9RunStatistics.  # noqa: E501
        :type: int
        """

        self._run_id = run_id

    @property
    def stdev(self):
        """Gets the stdev of this InlineResponseDefault9RunStatistics.  # noqa: E501


        :return: The stdev of this InlineResponseDefault9RunStatistics.  # noqa: E501
        :rtype: float
        """
        return self._stdev

    @stdev.setter
    def stdev(self, stdev):
        """Sets the stdev of this InlineResponseDefault9RunStatistics.


        :param stdev: The stdev of this InlineResponseDefault9RunStatistics.  # noqa: E501
        :type: float
        """

        self._stdev = stdev

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponseDefault9RunStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
