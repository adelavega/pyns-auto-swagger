# coding: utf-8

"""
    neuroscout

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.apianalyses_predictors import ApianalysesPredictors  # noqa: F401,E501


class Body(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compile_traceback': 'str',
        'data': 'object',
        'dataset_id': 'int',
        'description': 'str',
        'model': 'object',
        'name': 'str',
        'predictions': 'str',
        'predictors': 'list[ApianalysesPredictors]',
        'private': 'bool',
        'runs': 'list[ApianalysesPredictors]'
    }

    attribute_map = {
        'compile_traceback': 'compile_traceback',
        'data': 'data',
        'dataset_id': 'dataset_id',
        'description': 'description',
        'model': 'model',
        'name': 'name',
        'predictions': 'predictions',
        'predictors': 'predictors',
        'private': 'private',
        'runs': 'runs'
    }

    def __init__(self, compile_traceback=None, data=None, dataset_id=None, description=None, model=None, name=None, predictions=None, predictors=None, private=None, runs=None):  # noqa: E501
        """Body - a model defined in Swagger"""  # noqa: E501

        self._compile_traceback = None
        self._data = None
        self._dataset_id = None
        self._description = None
        self._model = None
        self._name = None
        self._predictions = None
        self._predictors = None
        self._private = None
        self._runs = None
        self.discriminator = None

        if compile_traceback is not None:
            self.compile_traceback = compile_traceback
        if data is not None:
            self.data = data
        self.dataset_id = dataset_id
        if description is not None:
            self.description = description
        if model is not None:
            self.model = model
        self.name = name
        if predictions is not None:
            self.predictions = predictions
        if predictors is not None:
            self.predictors = predictors
        if private is not None:
            self.private = private
        if runs is not None:
            self.runs = runs

    @property
    def compile_traceback(self):
        """Gets the compile_traceback of this Body.  # noqa: E501

        Traceback of compilation error.  # noqa: E501

        :return: The compile_traceback of this Body.  # noqa: E501
        :rtype: str
        """
        return self._compile_traceback

    @compile_traceback.setter
    def compile_traceback(self, compile_traceback):
        """Sets the compile_traceback of this Body.

        Traceback of compilation error.  # noqa: E501

        :param compile_traceback: The compile_traceback of this Body.  # noqa: E501
        :type: str
        """

        self._compile_traceback = compile_traceback

    @property
    def data(self):
        """Gets the data of this Body.  # noqa: E501


        :return: The data of this Body.  # noqa: E501
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Body.


        :param data: The data of this Body.  # noqa: E501
        :type: object
        """

        self._data = data

    @property
    def dataset_id(self):
        """Gets the dataset_id of this Body.  # noqa: E501


        :return: The dataset_id of this Body.  # noqa: E501
        :rtype: int
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this Body.


        :param dataset_id: The dataset_id of this Body.  # noqa: E501
        :type: int
        """
        if dataset_id is None:
            raise ValueError("Invalid value for `dataset_id`, must not be `None`")  # noqa: E501

        self._dataset_id = dataset_id

    @property
    def description(self):
        """Gets the description of this Body.  # noqa: E501


        :return: The description of this Body.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Body.


        :param description: The description of this Body.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def model(self):
        """Gets the model of this Body.  # noqa: E501

        BIDS model.  # noqa: E501

        :return: The model of this Body.  # noqa: E501
        :rtype: object
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Body.

        BIDS model.  # noqa: E501

        :param model: The model of this Body.  # noqa: E501
        :type: object
        """

        self._model = model

    @property
    def name(self):
        """Gets the name of this Body.  # noqa: E501

        Analysis name.  # noqa: E501

        :return: The name of this Body.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Body.

        Analysis name.  # noqa: E501

        :param name: The name of this Body.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def predictions(self):
        """Gets the predictions of this Body.  # noqa: E501

        User apriori predictions.  # noqa: E501

        :return: The predictions of this Body.  # noqa: E501
        :rtype: str
        """
        return self._predictions

    @predictions.setter
    def predictions(self, predictions):
        """Sets the predictions of this Body.

        User apriori predictions.  # noqa: E501

        :param predictions: The predictions of this Body.  # noqa: E501
        :type: str
        """

        self._predictions = predictions

    @property
    def predictors(self):
        """Gets the predictors of this Body.  # noqa: E501

        Predictor id(s) associated with analysis  # noqa: E501

        :return: The predictors of this Body.  # noqa: E501
        :rtype: list[ApianalysesPredictors]
        """
        return self._predictors

    @predictors.setter
    def predictors(self, predictors):
        """Sets the predictors of this Body.

        Predictor id(s) associated with analysis  # noqa: E501

        :param predictors: The predictors of this Body.  # noqa: E501
        :type: list[ApianalysesPredictors]
        """

        self._predictors = predictors

    @property
    def private(self):
        """Gets the private of this Body.  # noqa: E501

        Analysis private or discoverable?  # noqa: E501

        :return: The private of this Body.  # noqa: E501
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this Body.

        Analysis private or discoverable?  # noqa: E501

        :param private: The private of this Body.  # noqa: E501
        :type: bool
        """

        self._private = private

    @property
    def runs(self):
        """Gets the runs of this Body.  # noqa: E501

        Runs associated with analysis  # noqa: E501

        :return: The runs of this Body.  # noqa: E501
        :rtype: list[ApianalysesPredictors]
        """
        return self._runs

    @runs.setter
    def runs(self, runs):
        """Sets the runs of this Body.

        Runs associated with analysis  # noqa: E501

        :param runs: The runs of this Body.  # noqa: E501
        :type: list[ApianalysesPredictors]
        """

        self._runs = runs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
