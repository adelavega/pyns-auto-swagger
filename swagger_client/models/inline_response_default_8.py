# coding: utf-8

"""
    neuroscout

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.apipredictors_extracted_feature import ApipredictorsExtractedFeature  # noqa: F401,E501


class InlineResponseDefault8(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'extracted_feature': 'ApipredictorsExtractedFeature',
        'id': 'int',
        'name': 'str',
        'source': 'str'
    }

    attribute_map = {
        'description': 'description',
        'extracted_feature': 'extracted_feature',
        'id': 'id',
        'name': 'name',
        'source': 'source'
    }

    def __init__(self, description=None, extracted_feature=None, id=None, name=None, source=None):  # noqa: E501
        """InlineResponseDefault8 - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._extracted_feature = None
        self._id = None
        self._name = None
        self._source = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if extracted_feature is not None:
            self.extracted_feature = extracted_feature
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if source is not None:
            self.source = source

    @property
    def description(self):
        """Gets the description of this InlineResponseDefault8.  # noqa: E501

        Predictor description  # noqa: E501

        :return: The description of this InlineResponseDefault8.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponseDefault8.

        Predictor description  # noqa: E501

        :param description: The description of this InlineResponseDefault8.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def extracted_feature(self):
        """Gets the extracted_feature of this InlineResponseDefault8.  # noqa: E501


        :return: The extracted_feature of this InlineResponseDefault8.  # noqa: E501
        :rtype: ApipredictorsExtractedFeature
        """
        return self._extracted_feature

    @extracted_feature.setter
    def extracted_feature(self, extracted_feature):
        """Sets the extracted_feature of this InlineResponseDefault8.


        :param extracted_feature: The extracted_feature of this InlineResponseDefault8.  # noqa: E501
        :type: ApipredictorsExtractedFeature
        """

        self._extracted_feature = extracted_feature

    @property
    def id(self):
        """Gets the id of this InlineResponseDefault8.  # noqa: E501


        :return: The id of this InlineResponseDefault8.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponseDefault8.


        :param id: The id of this InlineResponseDefault8.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponseDefault8.  # noqa: E501

        Predictor name.  # noqa: E501

        :return: The name of this InlineResponseDefault8.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponseDefault8.

        Predictor name.  # noqa: E501

        :param name: The name of this InlineResponseDefault8.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def source(self):
        """Gets the source of this InlineResponseDefault8.  # noqa: E501


        :return: The source of this InlineResponseDefault8.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this InlineResponseDefault8.


        :param source: The source of this InlineResponseDefault8.  # noqa: E501
        :type: str
        """

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponseDefault8):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
