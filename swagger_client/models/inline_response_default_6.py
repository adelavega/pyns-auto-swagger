# coding: utf-8

"""
    neuroscout

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.apianalyses_predictors import ApianalysesPredictors  # noqa: F401,E501
from swagger_client.models.apidatasets_tasks import ApidatasetsTasks  # noqa: F401,E501


class InlineResponseDefault6(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset_address': 'str',
        'description': 'object',
        'id': 'int',
        'mimetypes': 'list[str]',
        'name': 'str',
        'preproc_address': 'str',
        'runs': 'list[ApianalysesPredictors]',
        'tasks': 'list[ApidatasetsTasks]'
    }

    attribute_map = {
        'dataset_address': 'dataset_address',
        'description': 'description',
        'id': 'id',
        'mimetypes': 'mimetypes',
        'name': 'name',
        'preproc_address': 'preproc_address',
        'runs': 'runs',
        'tasks': 'tasks'
    }

    def __init__(self, dataset_address=None, description=None, id=None, mimetypes=None, name=None, preproc_address=None, runs=None, tasks=None):  # noqa: E501
        """InlineResponseDefault6 - a model defined in Swagger"""  # noqa: E501

        self._dataset_address = None
        self._description = None
        self._id = None
        self._mimetypes = None
        self._name = None
        self._preproc_address = None
        self._runs = None
        self._tasks = None
        self.discriminator = None

        if dataset_address is not None:
            self.dataset_address = dataset_address
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if mimetypes is not None:
            self.mimetypes = mimetypes
        if name is not None:
            self.name = name
        if preproc_address is not None:
            self.preproc_address = preproc_address
        if runs is not None:
            self.runs = runs
        if tasks is not None:
            self.tasks = tasks

    @property
    def dataset_address(self):
        """Gets the dataset_address of this InlineResponseDefault6.  # noqa: E501

        BIDS Dataset remote address  # noqa: E501

        :return: The dataset_address of this InlineResponseDefault6.  # noqa: E501
        :rtype: str
        """
        return self._dataset_address

    @dataset_address.setter
    def dataset_address(self, dataset_address):
        """Sets the dataset_address of this InlineResponseDefault6.

        BIDS Dataset remote address  # noqa: E501

        :param dataset_address: The dataset_address of this InlineResponseDefault6.  # noqa: E501
        :type: str
        """

        self._dataset_address = dataset_address

    @property
    def description(self):
        """Gets the description of this InlineResponseDefault6.  # noqa: E501


        :return: The description of this InlineResponseDefault6.  # noqa: E501
        :rtype: object
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponseDefault6.


        :param description: The description of this InlineResponseDefault6.  # noqa: E501
        :type: object
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this InlineResponseDefault6.  # noqa: E501


        :return: The id of this InlineResponseDefault6.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponseDefault6.


        :param id: The id of this InlineResponseDefault6.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def mimetypes(self):
        """Gets the mimetypes of this InlineResponseDefault6.  # noqa: E501

        Dataset mimetypes/modalities  # noqa: E501

        :return: The mimetypes of this InlineResponseDefault6.  # noqa: E501
        :rtype: list[str]
        """
        return self._mimetypes

    @mimetypes.setter
    def mimetypes(self, mimetypes):
        """Sets the mimetypes of this InlineResponseDefault6.

        Dataset mimetypes/modalities  # noqa: E501

        :param mimetypes: The mimetypes of this InlineResponseDefault6.  # noqa: E501
        :type: list[str]
        """

        self._mimetypes = mimetypes

    @property
    def name(self):
        """Gets the name of this InlineResponseDefault6.  # noqa: E501

        Dataset name  # noqa: E501

        :return: The name of this InlineResponseDefault6.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponseDefault6.

        Dataset name  # noqa: E501

        :param name: The name of this InlineResponseDefault6.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def preproc_address(self):
        """Gets the preproc_address of this InlineResponseDefault6.  # noqa: E501

        Preprocessed data remote address  # noqa: E501

        :return: The preproc_address of this InlineResponseDefault6.  # noqa: E501
        :rtype: str
        """
        return self._preproc_address

    @preproc_address.setter
    def preproc_address(self, preproc_address):
        """Sets the preproc_address of this InlineResponseDefault6.

        Preprocessed data remote address  # noqa: E501

        :param preproc_address: The preproc_address of this InlineResponseDefault6.  # noqa: E501
        :type: str
        """

        self._preproc_address = preproc_address

    @property
    def runs(self):
        """Gets the runs of this InlineResponseDefault6.  # noqa: E501


        :return: The runs of this InlineResponseDefault6.  # noqa: E501
        :rtype: list[ApianalysesPredictors]
        """
        return self._runs

    @runs.setter
    def runs(self, runs):
        """Sets the runs of this InlineResponseDefault6.


        :param runs: The runs of this InlineResponseDefault6.  # noqa: E501
        :type: list[ApianalysesPredictors]
        """

        self._runs = runs

    @property
    def tasks(self):
        """Gets the tasks of this InlineResponseDefault6.  # noqa: E501


        :return: The tasks of this InlineResponseDefault6.  # noqa: E501
        :rtype: list[ApidatasetsTasks]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this InlineResponseDefault6.


        :param tasks: The tasks of this InlineResponseDefault6.  # noqa: E501
        :type: list[ApidatasetsTasks]
        """

        self._tasks = tasks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponseDefault6):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
