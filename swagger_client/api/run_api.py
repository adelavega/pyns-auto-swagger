# coding: utf-8

"""
    neuroscout

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class RunApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_runs_get(self, **kwargs):  # noqa: E501
        """Returns list of runs.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_runs_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param str session: Session number(s).
        :param str task_id: Task id(s).
        :param str number: Run number(s).
        :param str subject: Subject id(s).
        :param int dataset_id: Dataset id.
        :return: list[InlineResponseDefault10]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_runs_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_runs_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_runs_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns list of runs.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_runs_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str session: Session number(s).
        :param str task_id: Task id(s).
        :param str number: Run number(s).
        :param str subject: Subject id(s).
        :param int dataset_id: Dataset id.
        :return: list[InlineResponseDefault10]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session', 'task_id', 'number', 'subject', 'dataset_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_runs_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'session' in params:
            query_params.append(('session', params['session']))  # noqa: E501
        if 'task_id' in params:
            query_params.append(('task_id', params['task_id']))  # noqa: E501
        if 'number' in params:
            query_params.append(('number', params['number']))  # noqa: E501
        if 'subject' in params:
            query_params.append(('subject', params['subject']))  # noqa: E501
        if 'dataset_id' in params:
            query_params.append(('dataset_id', params['dataset_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponseDefault10]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_runs_run_id_get(self, run_id, **kwargs):  # noqa: E501
        """Get run by id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_runs_run_id_get(run_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int run_id: (required)
        :return: InlineResponseDefault10
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_runs_run_id_get_with_http_info(run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_runs_run_id_get_with_http_info(run_id, **kwargs)  # noqa: E501
            return data

    def api_runs_run_id_get_with_http_info(self, run_id, **kwargs):  # noqa: E501
        """Get run by id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_runs_run_id_get_with_http_info(run_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int run_id: (required)
        :return: InlineResponseDefault10
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['run_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_runs_run_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'run_id' is set
        if ('run_id' not in params or
                params['run_id'] is None):
            raise ValueError("Missing the required parameter `run_id` when calling `api_runs_run_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'run_id' in params:
            path_params['run_id'] = params['run_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/runs/{run_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault10',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_tasks_get(self, **kwargs):  # noqa: E501
        """Returns list of tasks.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_tasks_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param int dataset_id: Dataset id(s).
        :return: list[InlineResponseDefault11]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_tasks_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_tasks_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_tasks_get_with_http_info(self, **kwargs):  # noqa: E501
        """Returns list of tasks.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_tasks_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int dataset_id: Dataset id(s).
        :return: list[InlineResponseDefault11]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_tasks_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dataset_id' in params:
            query_params.append(('dataset_id', params['dataset_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/tasks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponseDefault11]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_tasks_task_id_get(self, task_id, **kwargs):  # noqa: E501
        """Get task by id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_tasks_task_id_get(task_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int task_id: (required)
        :return: InlineResponseDefault11
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_tasks_task_id_get_with_http_info(task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_tasks_task_id_get_with_http_info(task_id, **kwargs)  # noqa: E501
            return data

    def api_tasks_task_id_get_with_http_info(self, task_id, **kwargs):  # noqa: E501
        """Get task by id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_tasks_task_id_get_with_http_info(task_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int task_id: (required)
        :return: InlineResponseDefault11
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_tasks_task_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `api_tasks_task_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['task_id'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/tasks/{task_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault11',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
