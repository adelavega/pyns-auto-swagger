# coding: utf-8

"""
    neuroscout

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PredictorsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_predictor_events_get(self, **kwargs):  # noqa: E501
        """Get events for predictor(s)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_predictor_events_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param str predictor_id: Predictor id(s)
        :param str run_id: Run id(s)
        :return: list[InlineResponseDefault7]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_predictor_events_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_predictor_events_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_predictor_events_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get events for predictor(s)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_predictor_events_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str predictor_id: Predictor id(s)
        :param str run_id: Run id(s)
        :return: list[InlineResponseDefault7]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['predictor_id', 'run_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_predictor_events_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'predictor_id' in params:
            query_params.append(('predictor_id', params['predictor_id']))  # noqa: E501
        if 'run_id' in params:
            query_params.append(('run_id', params['run_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/predictor-events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponseDefault7]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_predictors_get(self, **kwargs):  # noqa: E501
        """Get list of predictors.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_predictors_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param str dataset_id: Dataset id(s). If set, ignores run ids
        :param str run_id: Run id(s). Warning, slow query.
        :param str name: Predictor name(s)
        :param bool newest: Return only newest Predictor by name
        :return: list[InlineResponseDefault8]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_predictors_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_predictors_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_predictors_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get list of predictors.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_predictors_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str dataset_id: Dataset id(s). If set, ignores run ids
        :param str run_id: Run id(s). Warning, slow query.
        :param str name: Predictor name(s)
        :param bool newest: Return only newest Predictor by name
        :return: list[InlineResponseDefault8]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_id', 'run_id', 'name', 'newest']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_predictors_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dataset_id' in params:
            query_params.append(('dataset_id', params['dataset_id']))  # noqa: E501
        if 'run_id' in params:
            query_params.append(('run_id', params['run_id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'newest' in params:
            query_params.append(('newest', params['newest']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/predictors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponseDefault8]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_predictors_predictor_id_get(self, predictor_id, **kwargs):  # noqa: E501
        """Get predictor by id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_predictors_predictor_id_get(predictor_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int predictor_id: (required)
        :return: InlineResponseDefault9
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.api_predictors_predictor_id_get_with_http_info(predictor_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_predictors_predictor_id_get_with_http_info(predictor_id, **kwargs)  # noqa: E501
            return data

    def api_predictors_predictor_id_get_with_http_info(self, predictor_id, **kwargs):  # noqa: E501
        """Get predictor by id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.api_predictors_predictor_id_get_with_http_info(predictor_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int predictor_id: (required)
        :return: InlineResponseDefault9
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['predictor_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_predictors_predictor_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'predictor_id' is set
        if ('predictor_id' not in params or
                params['predictor_id'] is None):
            raise ValueError("Missing the required parameter `predictor_id` when calling `api_predictors_predictor_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'predictor_id' in params:
            path_params['predictor_id'] = params['predictor_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/predictors/{predictor_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault9',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
